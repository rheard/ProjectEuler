"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
    are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle        P_3,n = n(n+1)/2       1, 3, 6, 10, 15, ...
Square          P_4,n = n**2           1, 4, 9, 16, 25, ...
Pentagonal      P_5,n = n(3n-1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P_6,n = n(2n-1)        1, 6, 15, 28, 45, ...
Heptagonal      P_7,n = n(5n-3)/2      1, 7, 18, 34, 55, ...
Octagonal       P_8,n = n(3n-2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of
    the next number (including the last number with the first).
2. Each polygonal type: triangle (P_3,127=8128), square (P_4,91=8281), and pentagonal (P_5,44=2882),
    is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
    triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

import os

from itertools import count
from copy import deepcopy

try:
    from .utils import output_answer
except ImportError:
    from utils import output_answer


class PolygonNumberChain:
    """A data structure to hold the list of numbers AND which of the gonal numbers are represented in said list."""

    def __init__(self, number=None, type_index=None):
        self.gonal_represented = [False] * 6
        self.numbers = []

        if type_index is not None and number is not None:
            self.numbers.append(number)
            self.gonal_represented[type_index] = True


def solve():
    """
    We simply start with 1-length chains consisting of all the octagonal numbers below a limit.

    Then we go through each gonal number, trying to add it on to either side, creating 2-length chains.

    We repeat that process until we find 1 number chain with 1 of each of the gonal numbers.
    """
    gonal_numbers = [[] for _ in range(6)]
    for i in count(1):
        new_gonal_numbers = [i * (i + 1) // 2,
                             i ** 2,
                             i * (3 * i - 1) // 2,
                             i * (2 * i - 1),
                             i * (5 * i - 3) // 2,
                             i * (3 * i - 2)]

        if all(x >= 10000 for x in new_gonal_numbers):
            break

        for gonal_index, number in enumerate(new_gonal_numbers):
            if not 1000 <= number < 10000:
                continue

            gonal_numbers[gonal_index].append(str(number))

    # Seed the list of potential chains with all the octagonal numbers.
    # The solution will begin with a octagonal number for this reason.
    # Since the solution is cyclic, any polygonal number can seed the set.
    potential_chains = [PolygonNumberChain(x, -1) for x in gonal_numbers[-1]]

    while len(potential_chains) > 1 and not all(potential_chains[0].gonal_represented):
        new_potential_chains = []
        for chain in potential_chains:
            for gonal_index, this_gonal_numbers in enumerate(gonal_numbers):
                if chain.gonal_represented[gonal_index]:
                    continue

                for gonal_number in this_gonal_numbers:
                    if gonal_number[:2] == chain.numbers[-1][2:]:
                        new_chain = deepcopy(chain)
                        new_chain.numbers.append(gonal_number)
                        new_chain.gonal_represented[gonal_index] = True
                        if len(new_chain.numbers) == 6 and gonal_number[2:] != chain.numbers[0][:2]:
                            continue

                        new_potential_chains.append(new_chain)

        potential_chains = new_potential_chains

    return sum(int(x) for x in potential_chains[0].numbers)


solve.answer = 28684


if __name__ == '__main__':
    output_answer(solve)
